@startuml ChopWash-System-Class-Diagram

left to right direction
skinparam Style strictuml
!theme amiga

class ChopWash{}
database "Da Chop Base"{

}

' Controllers
class EmployeeController{}
class WashController{}
class CustomerController{}
class InvoiceController{}


' Services
class EmployeeService{
    assignEmployeeToWash(employeeId, washId)
}
class CustomerService{
    List<Customer> findCustomersByPastDueInvoice()
}
class WashService{
    addWash(washType)
    List<Wash> findIncompleteWash()
}
class InvoiceService{
    List<Invoice> findPastDueInvoices()
}


'Repos
class EmployeeRepo{
    addEmployee()
    Employee findEmployeeById(employeeId)
    Employee findEmployeeByFirstName(firstName)
    Employee findEmployeeByLastName(lastName)
    terminateEmployee(employeeId)
    addRole(employeeId, roleId)
    removeRole(employeeId, roleId)
}
class CustomerRepo{
    addCustomer()
    removeCustomer(customerId)
    Customer findCustomerById(customerId)
    Customer findCustomerByFirstName(firstName)
    Customer findCustomerByLastName(lastName)
}
class WashRepo{
    addWash()
    boolean getCompleteStatus()
    wash findWashById(washId)
}
class InvoiceRepo{
    addInvoice()
    Invoice findInvoiceById(washId, customerId)
    Invoice findInvoiceByCustomerId(customerId)
    Invoice findInvoiceByDate(createdDate)
    Invoice makePayment(washId, customerId, amt)
    Invoice findPaidInvoices()
    Invoice findUnpaidInvoices()
    double getBalance(invoiceId)
}



'Entities
entity Customer{
    *Integer customerId <<PK>>
    --
    *String firstName
    *String lastName
}
entity Employee{
   *Integer employeeId <<PK>>
   --
    *String firstName
    *String lastName 
    *role <<FK>>
    *date hireDate
    date terminationDate
}
entity Invoice {
    *Integer washId <<PK>>
    *Integer customerId <<PK>>
    --
    double invoiceTotal
    double balance
    date createdDate
    date paidDate
}
entity Wash{
    *Integer washId <<PK>>
    --
    *washerId <<FK>>
    *customerId <<FK>>
    *enum washType
    *boolean complete 
}
entity Role{
    *Integer roleId
    --
    String title
    double salary
}
entity Payments{
    *Integer paymentId <<PK>>
    --
    Integer invoiceId <<FK>>
    double paymentValue
}


' Relationships
ChopWash .. EmployeeController
ChopWash .. CustomerController
ChopWash .. WashController
ChopWash .. InvoiceController

EmployeeController .. EmployeeService
CustomerController .. CustomerService
WashController .. WashService
InvoiceController .. InvoiceService

EmployeeService .. EmployeeRepo
CustomerService .. CustomerRepo
WashService .. WashRepo
InvoiceService .. InvoiceRepo

EmployeeRepo ||--"*" Employee
CustomerRepo o--"*" Customer
InvoiceRepo o--"*" Invoice
WashRepo o--"*" Wash

Employee ||-left|{ Role
Invoice ||-o{ Payments

Wash ||-|| Customer
Employee ||-|| Wash

EmployeeService . WashService
WashService . CustomerService
CustomerService . InvoiceService

Employee --- "Da Chop Base"
Customer --- "Da Chop Base"
Wash --- "Da Chop Base"
Invoice --- "Da Chop Base"

@enduml